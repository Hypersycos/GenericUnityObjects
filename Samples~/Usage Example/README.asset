%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 3732b7fccbe84e4fa096cfbd2b945f24, type: 3}
  m_Name: README
  m_EditorClassIdentifier: 
  _description: 'The example contains two classes derived from GenericScriptableObject:

    -
    WarriorStats<TClass>

    - WarriorsRelationship<TFirst, TSecond>


    You can
    find them in the GenericScriptableObjects folder.


    You can check the assets
    created from those classes in the "Warrior Stats" and "Relationships" folders.


    To
    create a new asset, press RMB in the Project window -> Create -> WarriorStats<TClass>.
    The asset creation looks a bit different for generic scriptable objects with
    one generic argument, and with multiple ones, so be sure to check out both.


    You
    can see how [CreateGenericAssetMenu] makes the classes apear in the context menu.


    The
    plugin generates an empty concrete class for a generic type when you create an
    asset. You can find the generated classes in the ConcreteImplementations folder.


    By
    default, the namespace of all generated classes is GenericSOTypes, and they are
    stored in the Scripts/GenericSOTypes folder. You can specify custom namespace
    and path in the CreateGenericAssetMenu constructor.'
